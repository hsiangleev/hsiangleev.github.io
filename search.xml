<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[记录未留心的vue细节]]></title>
    <url>%2F2019%2F03%2F06%2Fjs%2F%E6%9C%AA%E7%95%99%E5%BF%83%E7%9A%84vue%E7%BB%86%E8%8A%82%2F</url>
    <content type="text"><![CDATA[vue模板语法v-once指令通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。&lt;span v-once&gt;这个将不会改变: &lt;/span&gt;动态参数（2.6.0 新增）可以用方括号括起来的 JavaScript 表达式作为一个指令的参数，即节点属性可以动态设置&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;计算属性和侦听器计算属性（对于任何复杂逻辑，都应当使用计算属性）如果计算属性的依赖属性发生改变，则计算属性也会相应改变计算属性是基于它们的依赖进行缓存的，只在相关依赖发生改变时它们才会重新求值条件渲染在 template 元素上使用 v-if 条件渲染分组，而不需要多加一层div因为 v-if 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素，此时可以把一个 template 元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含 template 元素。12345&lt;template v-if="ok"&gt; &lt;h1&gt;Title&lt;/h1&gt; &lt;p&gt;Paragraph 1&lt;/p&gt; &lt;p&gt;Paragraph 2&lt;/p&gt;&lt;/template&gt;用 key 管理可复用的元素Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。所以使用v-if切换input的时候已经输入的input值不会清除，所以添加一个具有唯一值的 key 属性代表这两个元素是完全独立的，不要复用它们。12345678&lt;template v-if="loginType === 'username'"&gt; &lt;label&gt;Username&lt;/label&gt; &lt;input placeholder="Enter your username" key="username-input"&gt;&lt;/template&gt;&lt;template v-else&gt; &lt;label&gt;Email&lt;/label&gt; &lt;input placeholder="Enter your email address" key="email-input"&gt;&lt;/template&gt;列表渲染v-for遍历对象1234&lt;!-- value, key, index分别代表 值, 键, 索引 --&gt;&lt;div v-for="(value, key, index) in object"&gt; &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;&lt;/div&gt;数组更新检测由于 JavaScript 的限制，Vue 不能检测以下变动的数组：当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue当你修改数组的长度时，例如：vm.items.length = newLength1234567var vm = new Vue(&#123;data: &#123; items: ['a', 'b', 'c']&#125;&#125;)vm.items[1] = 'x' // 不是响应性的vm.items.length = 2 // 不是响应性的为了解决第一类问题，以下两种方式都可以实现和 vm.items[indexOfItem] = newValue 相同的效果，同时也将触发状态更新：Vue.set(vm.items, indexOfItem, newValue)vm.items.splice(indexOfItem, 1, newValue)为了解决第二类问题，你可以使用 splice：vm.items.splice(newLength)对象更改检测注意事项由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：1234567891011var vm = new Vue(&#123; data: &#123; person: &#123; a: 1 &#125; &#125;&#125;)// `vm.person.a` 现在是响应式的vm.person.b = 2// `vm.person.b` 不是响应式的可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名：vm.$set(vm.person, &#39;b&#39;, 2)]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js选中文本和复制文本]]></title>
    <url>%2F2019%2F03%2F01%2Fjs%2Fjs%E9%80%89%E4%B8%AD%E6%96%87%E6%9C%AC%E4%B8%8E%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Selectionvar selection = window.getSelection();selection 是一个 Selection 对象。 如果想要将 selection 转换为字符串，可通过连接一个空字符串（””）或使用 String.toString() 方法。即selection+&quot;&quot;或者selection.toString()会返回页面中选中的文本Range被选中的文字会对应一个range对象，代表选中的区域，通过window.getSelection().getRangeAt(0)代表第一个被选中的区域，也可以通过document.createRange()创建一个选中区域，range.selectNodeContents(el)将dom节点添加到range对象，selection.addRange(range)将range添加到文本选中区，selection.removeAllRanges()为取消选中的文本。执行下面的代码会选中页面的第一个p元素。12345var el = document.querySelector("p");var selection = window.getSelection();var range = document.createRange();range.selectNodeContents(el);selection.addRange(range);execCommand 方法允许运行命令来操纵可编辑内容区域的元素。bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument);aCommandName: 一个 DOMString ，命令的名称。aShowDefaultUI: 一个 Boolean， 是否展示用户界面，一般为 false。aValueArgument: 一些命令（例如insertImage）需要额外的参数（insertImage需要提供插入image的url），默认为null。返回值bool为布尔值，如果是 false 则表示操作不被支持或未被启用，执行document.execCommand(&#39;Copy&#39;, &#39;false&#39;, null);会复制页面选中的文本示例（点击按钮复制p文本内容）123456789101112131415// 页面dom元素&lt;p&gt;aaa&lt;/p&gt;&lt;button&gt;复制&lt;/button&gt;// js代码document.querySelector("button").onclick=function() &#123; var el = document.querySelector("p"); var selection = window.getSelection(); var range = document.createRange(); range.selectNodeContents(el); selection.removeAllRanges(); selection.addRange(range); document.execCommand('Copy', 'false', null); selection.removeAllRanges();&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于layui的tree组件]]></title>
    <url>%2F2019%2F02%2F28%2Fjs%2FeleTree%2F</url>
    <content type="text"><![CDATA[因公司使用的是layui框架，而layui的树组件实现的功能太少，所以便想着自己实现一个，顺便练练手，期间因逻辑混乱代码重构过一次。插件整体思路对外仅暴漏出eleTree接口，eleTree有两个方法，on方法是layui封装的事件机制，render方法为初始化，调用render方法时，初始化树,生成实例对象thisTree为实例对象上对外的方法Class为真正的构造函数，主体结构如下：12345678910111213141516171819202122232425262728293031323334var eleTree=&#123; on: function(events, callback)&#123; return layui.onevent.call(this, MOD_NAME, events, callback); &#125;, render: function(options) &#123; var inst = new Class(options); return thisTree.call(inst); &#125;&#125;var thisTree=function() &#123; var _self=this; var options = _self.config; // 暴漏外面的方法 return &#123; append: function(key,data) &#123; if(options.data.length===0) return; return _self.append.call(_self,key,data); &#125;, // ... &#125;&#125;var Class=function(options) &#123; // ...&#125;;Class.prototype=&#123; constructor: Class, append: function(key,data) &#123; // ... &#125; // ...&#125;代码执行过程当调用var el=eleTree.render({})的时候调用Class构造函数初始化树，执行thisTree.call(inst);，即执行thisTree函数，函数内部的this为inst实例对象，然后返回一个包含多个方法的对象所以返回值el为包含多个方法的对象当调用el.append()方法时，执行inst实例对象的append方法，即执行Class原型链上的append方法，append方法内部this还是inst实例对象在线文档在线示例github源码]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>layui</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[添加图片放大效果和桃心效果]]></title>
    <url>%2F2019%2F02%2F12%2Fhexo%E9%85%8D%E7%BD%AE%2F%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E6%95%88%E6%9E%9C%E5%92%8C%E6%A1%83%E5%BF%83%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[添加图片放大效果和滚动缩放效果找到主题文件夹下的目录/source/js/src/post-details.js添加下面代码123456789101112131415161718192021222324252627282930// 图片放大$(document).ready(function() &#123; $(document.body).append('&lt;div class="lee-increase"&gt;&lt;img src=""&gt;&lt;/div&gt;'); var isShow=false; $(".post-body img").on("click",function() &#123; var src=$(this).attr("src"); var alt=$(this).attr("alt"); $(".lee-increase").show().children("img").attr("src", src).attr("alt",alt).width("auto"); $(document.body).css("overflow","hidden"); isShow=true; &#125;) $(".lee-increase").on("click",function() &#123; $(this).hide(); $(document.body).css("overflow","auto"); isShow=false; &#125;) // 鼠标滚动放大缩小 $(document).on('mousewheel DOMMouseScroll', function(e) &#123; if(!isShow) return; e.preventDefault(); var wheel = e.originalEvent.wheelDelta || -e.originalEvent.detail; var delta = Math.max(-1, Math.min(1, wheel) ); var w=$(".lee-increase img").width(); if(delta&lt;0)&#123;//向下滚动 $(".lee-increase img").width(w+50); &#125;else&#123;//向上滚动 $(".lee-increase img").width(w-50); &#125; &#125;);&#125;);找到主题文件夹下的目录/source/css/_custom/custom.styl添加下面代码1234567891011121314151617181920212223242526// 图片放大.post-body img&#123; cursor: pointer; cursor: zoom-in;&#125;.lee-increase&#123; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: #333; background-color: #333c; z-index: 99999; display: none; &amp;&gt;img&#123; max-width: 90%; min-width: 20%; position: absolute; top: 50%; left: 50%; cursor: pointer; cursor: zoom-out; transform: translate(-50%, -50%); &#125;&#125;点击出现桃心效果在post-details.js后面继续添加代码1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);]]></content>
      <categories>
        <category>hexo配置</category>
      </categories>
      <tags>
        <tag>hexo图片放大</tag>
        <tag>hexo桃心效果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义域名解析和安装SSL证书]]></title>
    <url>%2F2019%2F02%2F11%2Fhexo%E9%85%8D%E7%BD%AE%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[自定义域名解析1. 申请域名我是直接在阿里云购买的.xyz为后缀的域名，阿里云域名购买。2. 添加DNS解析进入阿里云域名解析，可以看到当前购买的域名点击域名进入域名解析界面点击添加记录弹出窗口添加下图的三项记录3. 添加CNAME文件在hexo根目录的source目录新建文件，名为CNAME(无后缀名)，文件内容为域名地址，我的是hsianglee.xyz，所以在文件内直接输入hsianglee.xyz并保存。部署hexo网站hexo d -g。过几分钟之后再访问域名应该就可以了安装SSL证书，使用https访问网站1. 证书购买网址选择Symantec购买免费版购买完成后跳到SSL证书2. 申请点击申请会在右侧弹出填写完成后点击下一步点击验证之后会自动添加一条域名解析记录，然后点击下面的提交审核。审核完成之后会提示为已签发3. 添加域名解析记录在域名解析页面添加四条记录到github的博客设置里面把Enforce HTTPS 前面的checkbox选中如果无法选中，则可以删除上面的域名保存之后再重新添加域名，等几分钟之后应该就可以了然后使用https访问网站便会出现前面的锁了]]></content>
      <categories>
        <category>hexo配置</category>
      </categories>
      <tags>
        <tag>域名解析</tag>
        <tag>ssl证书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb操作命令]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[$set 更新或添加属性例123456789101112131415161718&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A" &#125;, &#123; "item" : "B", "score" : 4.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125; ] &#125; ]&#125;添加属性1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$set: &#123;"arr.0.score": 10&#125;&#125;)更新属性1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$set: &#123;"arr.1.score": 10&#125;&#125;)结果12345678910111213141516171819&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A", "score" : 10.0 &#125;, &#123; "item" : "B", "score" : 10.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125; ] &#125; ]&#125;$unset 删除对象的属性或把数组的其中一项变成null例1234567891011121314151617181920212223&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A", "score" : 5.5 &#125;, &#123; "item" : "B", "score" : 4.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125;, &#123; "q" : 1.0, "a" : 0.0 &#125; ] &#125; ]&#125;删除一个指定的字段12345// 删除arr数组的第一项的score属性db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$unset: &#123;"arr.0.score": 1&#125;&#125;)当匹配到的是数组元素，$unset替换指定的元素为null而不是删除掉指定的元素，此行为保持数组大小和位置不变；12345// 把数组arr的第二项的answers的第二项的值变为nulldb.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$unset: &#123;"arr.1.answers.1": 1&#125;&#125;)结果12345678910111213141516171819&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A" &#125;, &#123; "item" : "B", "score" : 4.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125;, null ] &#125; ]&#125;$rename 重新命名属性名(不能操作数组)例123456&#123; "_id" : 1.0, "name" : &#123; "gge" : 18 &#125;&#125;1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$rename: &#123;"name.gge": "name.age"&#125;&#125;)结果123456&#123; "_id" : 1.0, "name" : &#123; "age" : 18 &#125;&#125;$pop 删除数组中的第一个或者最后一个元素(给$pop传递-1会删除第一个元素传递1会删除最后一个元素)例12345678910&#123; "_id" : 1.0, "arr" : [ 1, 2, 3, 4, 5 ]&#125;删除数组第一个1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pop: &#123;"arr": -1&#125;&#125;)删除数组最后一个1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pop: &#123;"arr": 1&#125;&#125;)结果12345678&#123; "_id" : 1.0, "arr" : [ 2, 3, 4 ]&#125;$pull 删除数组中符合条件的元素例123456789101112131415&#123; "_id" : 1.0, "arr" : [ &#123; "a": 2, "b": 5, "c": 8 &#125;, &#123; "a": 6, "b": 7, "c": 8 &#125; ]&#125;删除数组arr中的a&gt;=5的项1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pull: &#123;"arr": &#123;"a": &#123;$gte: 5&#125;&#125;&#125;&#125;)结果12345678910&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 2, "b" : 5, "c" : 8 &#125; ]&#125;使用$elemMatch匹配多个条件1234567891011121314151617181920212223242526272829&#123; "_id" : 1.0, "arr" : [ &#123; "c" : [ &#123; "a" : 10, "b" : 10 &#125;, &#123; "a" : 15, "b" : 15 &#125; ] &#125;, &#123; "c" : [ &#123; "a" : 20, "b" : 20 &#125;, &#123; "a" : 25, "b" : 25 &#125; ] &#125; ]&#125;删除arr数组 中的c数组中 (a=25 &amp;&amp; b=25)1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pull: &#123;"arr": &#123;"c": &#123;$elemMatch: &#123;"a": 25,"b":25&#125;&#125;&#125;&#125;&#125;)结果1234567891011121314151617&#123; "_id" : 1.0, "arr" : [ &#123; "c" : [ &#123; "a" : 10, "b" : 10 &#125;, &#123; "a" : 15, "b" : 15 &#125; ] &#125; ]&#125;$push 向已有的数组末尾加入一个元素例123456&#123; "_id" : 1.0, "arr" : [ 5 ]&#125;1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": 10&#125;&#125;)结果1234567&#123; "_id" : 1.0, "arr" : [ 5, 10.0 ]&#125;使用$position添加到任意位置12345// 在arr数组第二项插入四项数据db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [15,16,17,18], $position: 1&#125;&#125;&#125;)结果1234567891011&#123; "_id" : 1.0, "arr" : [ 5, 15.0, 16.0, 17.0, 18.0, 10.0 ]&#125;$sort 数组排序1为升序排列，-1为降序排列12345678910&#123; "_id" : 1.0, "arr" : [ 3, 1, 5, 2, 6 ]&#125;1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [], $sort: 1&#125;&#125;&#125;)结果12345678910&#123; "_id" : 1.0, "arr" : [ 1, 2, 3, 5, 6 ]&#125;2. 根据数组的某一项排序12345678910111213141516171819202122232425&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 5, "b" : 6 &#125;, &#123; "a" : 3, "b" : 6 &#125;, &#123; "a" : 2, "b" : 6 &#125;, &#123; "a" : 4, "b" : 6 &#125;, &#123; "a" : 5, "b" : 6 &#125; ]&#125;12345// 根据数组arr的a属性升序排列db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [], $sort: &#123;"a": 1&#125;&#125;&#125;&#125;)结果12345678910111213141516171819202122232425&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 2, "b" : 6 &#125;, &#123; "a" : 3, "b" : 6 &#125;, &#123; "a" : 4, "b" : 6 &#125;, &#123; "a" : 5, "b" : 6 &#125;, &#123; "a" : 5, "b" : 6 &#125; ]&#125;$slice 数组截取正数则从前向后，负数从后向前12345678910&#123; "_id" : 1.0, "arr" : [ 1, 2, 3, 4, 5 ]&#125;12345// 截取数组arr后三位db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [], $slice: -3&#125;&#125;&#125;)结果12345678&#123; "_id" : 1.0, "arr" : [ 3, 4, 5 ]&#125;占位符$，更新数组的某一项不确定位置的值例11234&#123; "_id" : 1.0, "arr" : [ 3, 4, 5, 20 ]&#125;12345// 把数组arr值为20的变成10db.getCollection('user').update( &#123;"_id": 1.0, "arr": 20&#125;, &#123;$set: &#123;"arr.$": NumberInt(10)&#125;&#125;)结果1234&#123; "_id" : 1.0, "arr" : [ 3, 4, 5, 10 ]&#125;例21234567891011121314151617&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 1, "b" : 10 &#125;, &#123; "a" : 2, "b" : 20 &#125;, &#123; "a" : 3, "b" : 30 &#125; ]&#125;12345// 更新数组arr里面属性a为2的，把当前位置的b变成200db.getCollection('user').update( &#123;"_id": 1.0, "arr.a": 2&#125;, &#123;$set: &#123;"arr.$.b": NumberInt(200)&#125;&#125;)结果1234567891011121314151617&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 1, "b" : 10 &#125;, &#123; "a" : 2, "b" : 200 &#125;, &#123; "a" : 3, "b" : 30 &#125; ]&#125;]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb安装]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1. 进入mongodb\bin目录 =&gt;cmd2. 在mongodb目录创建 \data\db3. cmd执行mongod.exe --dbpath=D:\mongodb\data\db4. 在mongodb目录创建 \data\log5. cmd执行 mongod.exe --logpath=D:\mongodb\data\log\mongodb.log6. 在mongodb目录创建配置文件（mongodb.config）7. 配置文件内容12dbpath=D:\mongodb\data\dblogpath=D:\mongodb\data\log\mongodb.log8. 执行 mongod.exe --config D:\mongodb\mongodb.config9. 添加到服务 （servies.msc）1mongod.exe --dbpath=D:\mongodb\data\db --logpath=D:\mongodb\data\log\log.txt --install --serviceName "MongoDB"10. 开启关闭服务123net start mongodbnet stop mongodbsc delete "MongoDB" # 删除服务]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb数据导入导出]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%2F</url>
    <content type="text"><![CDATA[进入mongodb的bin目录1. 数据导出-d: 数据库名称-c: 表名-o: 存储路径–type: 导出类型-f: 导出的数据mongoexport -d test -c blog -o G:\users.json --type json -f &quot;_id,data,user&quot;2. 数据导入-d: 数据库名称-c: 表名–file: 路径–type: 导出类型mongoimport -d test -c us --file G:\users.json --type json]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb加密]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[1. 切换到admin数据库use admin2. 管理员设置密码db.createUser({user: &quot;root&quot;,pwd: &quot;123&quot;,roles: [&quot;root&quot;]})3. 验证是否成功db.auth(&quot;root&quot;,&quot;123&quot;)4. 给其它数据库添加用户12use testdb.createUser(&#123;user: "hsianglee",pwd: "123",roles: [&#123;role: "readWrite",db: "test"&#125;]&#125;)5. mongodb.config内容修改12dbpath=F:\mongodb\data\db --authlogpath=F:\mongodb\data\log\mongodb.log6. 重启服务mongodb.exe --dbpath F:\mongodb\data\db --auth7. node连接mongodb://root:123@127.0.0.1:27017/test8. 其它命令1234db.system.users.find() # 查询已添加用户（切换到admin）db.auth("root","123") # 登录认证db.dropUser("lee") # 删除用户（先切换到当前数据库）db.updateUser("test",&#123;user: "",pwd: "", roles: [&#123;role: "read",db: "test"&#125;]&#125;) # 修改权限]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回忆录]]></title>
    <url>%2F2017%2F10%2F09%2Fessay%2F%E5%9B%9E%E5%BF%86%E5%BD%95%2F</url>
    <content type="text"><![CDATA[相识以来九年有余，初识为汝之惊艳，汝为班长，查吾之英语。犹记之试之，吾以一纸求助于汝，汝视之弃之于娄，转而书纸助汝身后之人，时心塞之。本以与汝再无交集，却怎料初三之末，师令吾移位于汝桌之后，吾寡言，汝却擅谈，故相聊甚欢，以至于常于课传纸之于汝。未在校时，常以信聊，一日，接汝之电话，欣喜不已，然却为汝之母，以吾误汝之，批吾训吾。汝偶至吾之租舍旁，欣喜未言，因友亦喜于汝，视友与汝同食一桌，亦喜亦忧。本以为毕业之后亦无瓜葛，却于前夕于吾之抽屉视一本，字迹似汝，本上几言吾却误之，汝予吾之照片亦存于此。而后假期两月有余，常聊于扣。吾非善熬夜之人，汝却是，常聊至夜半时，然今非兮。而后至高中，同校邻班，却未敢寻汝，亦记时逢考试，汝于吾班，留一纸，主体却只一字，吾亦误之。后汝知吾常于自习之后步于操场，汝云减肥，故同步，谓吾于汝班旁候汝，亦喜。未几，汝以众口弃步，吾亦弃之。尔后愈惧汝，遇之未敢视，话之未敢答，只一笑于汝。汝以一纸信问吾何故，吾亦不知，终未答。后闻汝有友已半年有余，亦不知为何言，彻夜难眠，未敢再见。于网识一友，谓之以佳，其云乎天鹅湖边鸟飞绝，寒山寺上一棵竹，吾遂谎之删之，此为吾之错耳。倏而汝云分之，亦喜亦忧，复往昔。一日，室友知汝于桥边，怂吾寻汝，未敢，其人去往，吾亦随之，然未至之时，其先吾而跑，未曾追，不知以何谓汝，遂弃而游于河边，压抑甚久，见圆月以抒怀。然汝电话于吾，令吾往之，思虑再三终至。吾知其人助吾白于汝，或因卑，或因尊，或因不知何为恋，终未敢言丝毫。高三末时，闻人白于汝，汝拒之，甚喜甚忧。本于试后白之。后汝常寻吾，吾亦之，然至今未知汝此为何意，汝常以数学问吾，令吾送之至汝班，数日之后汝即有友，而汝友之数学胜之于吾。初视汝与汝友同于伞，入茶店，未曾信，后登汝之扣视其言语问于汝，方知晚矣。时至今汝与之分合数次，然吾亦一人也，虽偶梦汝归，知其间阂之深已非过往，期年未见早已不知汝之喜忧，终是缘而无份。]]></content>
      <categories>
        <category>兮词</category>
      </categories>
      <tags>
        <tag>兮词</tag>
      </tags>
  </entry>
</search>
