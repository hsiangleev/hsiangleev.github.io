<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[自定义域名解析和安装SSL证书]]></title>
    <url>%2F2019%2F02%2F11%2F%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[自定义域名解析 1. 申请域名我是直接在阿里云购买的.xyz为后缀的域名，阿里云域名购买。 2. 添加DNS解析 进入阿里云域名解析，可以看到当前购买的域名 点击域名进入域名解析界面 点击添加记录弹出窗口 添加下图的三项记录 3. 添加CNAME文件 在hexo根目录的source目录新建文件，名为CNAME(无后缀名)，文件内容为域名地址，我的是hsianglee.xyz，所以在文件内直接输入hsianglee.xyz并保存。 部署hexo网站hexo d -g。 过几分钟之后再访问域名应该就可以了 安装SSL证书，使用https访问网站 1. 证书购买 网址 选择Symantec购买免费版 购买完成后跳到SSL证书 2. 申请 点击申请会在右侧弹出 填写完成后点击下一步 点击验证之后会自动添加一条域名解析记录，然后点击下面的提交审核。 审核完成之后会提示为已签发 3. 添加域名解析记录 在域名解析页面添加四条记录 到github的博客设置里面把Enforce HTTPS 前面的checkbox选中 如果无法选中，则可以删除上面的域名保存之后再重新添加域名，等几分钟之后应该就可以了 然后使用https访问网站便会出现前面的锁了]]></content>
      <categories>
        <category>域名解析</category>
      </categories>
      <tags>
        <tag>域名解析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb操作命令]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[$set 更新或添加属性 例123456789101112131415161718&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A" &#125;, &#123; "item" : "B", "score" : 4.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125; ] &#125; ]&#125; 添加属性1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$set: &#123;"arr.0.score": 10&#125;&#125;) 更新属性1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$set: &#123;"arr.1.score": 10&#125;&#125;) 结果12345678910111213141516171819&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A", "score" : 10.0 &#125;, &#123; "item" : "B", "score" : 10.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125; ] &#125; ]&#125; $unset 删除对象的属性或把数组的其中一项变成null 例1234567891011121314151617181920212223&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A", "score" : 5.5 &#125;, &#123; "item" : "B", "score" : 4.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125;, &#123; "q" : 1.0, "a" : 0.0 &#125; ] &#125; ]&#125; 删除一个指定的字段12345// 删除arr数组的第一项的score属性db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$unset: &#123;"arr.0.score": 1&#125;&#125;) 当匹配到的是数组元素，$unset替换指定的元素为null而不是删除掉指定的元素，此行为保持数组大小和位置不变；12345// 把数组arr的第二项的answers的第二项的值变为nulldb.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$unset: &#123;"arr.1.answers.1": 1&#125;&#125;) 结果12345678910111213141516171819&#123; "_id" : 1.0, "arr" : [ &#123; "item" : "A" &#125;, &#123; "item" : "B", "score" : 4.0, "answers" : [ &#123; "q" : 1.0, "a" : 0.0 &#125;, null ] &#125; ]&#125; $rename 重新命名属性名(不能操作数组) 例123456&#123; "_id" : 1.0, "name" : &#123; "gge" : 18 &#125;&#125; 1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$rename: &#123;"name.gge": "name.age"&#125;&#125;) 结果123456&#123; "_id" : 1.0, "name" : &#123; "age" : 18 &#125;&#125; $pop 删除数组中的第一个或者最后一个元素(给$pop传递-1会删除第一个元素传递1会删除最后一个元素) 例12345678910&#123; "_id" : 1.0, "arr" : [ 1, 2, 3, 4, 5 ]&#125; 删除数组第一个1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pop: &#123;"arr": -1&#125;&#125;) 删除数组最后一个1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pop: &#123;"arr": 1&#125;&#125;) 结果12345678&#123; "_id" : 1.0, "arr" : [ 2, 3, 4 ]&#125; $pull 删除数组中符合条件的元素 例123456789101112131415&#123; "_id" : 1.0, "arr" : [ &#123; "a": 2, "b": 5, "c": 8 &#125;, &#123; "a": 6, "b": 7, "c": 8 &#125; ]&#125; 删除数组arr中的a&gt;=5的项1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pull: &#123;"arr": &#123;"a": &#123;$gte: 5&#125;&#125;&#125;&#125;) 结果12345678910&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 2, "b" : 5, "c" : 8 &#125; ]&#125; 使用$elemMatch匹配多个条件1234567891011121314151617181920212223242526272829&#123; "_id" : 1.0, "arr" : [ &#123; "c" : [ &#123; "a" : 10, "b" : 10 &#125;, &#123; "a" : 15, "b" : 15 &#125; ] &#125;, &#123; "c" : [ &#123; "a" : 20, "b" : 20 &#125;, &#123; "a" : 25, "b" : 25 &#125; ] &#125; ]&#125; 删除arr数组 中的c数组中 (a=25 &amp;&amp; b=25)1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$pull: &#123;"arr": &#123;"c": &#123;$elemMatch: &#123;"a": 25,"b":25&#125;&#125;&#125;&#125;&#125;) 结果1234567891011121314151617&#123; "_id" : 1.0, "arr" : [ &#123; "c" : [ &#123; "a" : 10, "b" : 10 &#125;, &#123; "a" : 15, "b" : 15 &#125; ] &#125; ]&#125; $push 向已有的数组末尾加入一个元素 例123456&#123; "_id" : 1.0, "arr" : [ 5 ]&#125; 1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": 10&#125;&#125;) 结果1234567&#123; "_id" : 1.0, "arr" : [ 5, 10.0 ]&#125; 使用$position添加到任意位置12345// 在arr数组第二项插入四项数据db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [15,16,17,18], $position: 1&#125;&#125;&#125;) 结果1234567891011&#123; "_id" : 1.0, "arr" : [ 5, 15.0, 16.0, 17.0, 18.0, 10.0 ]&#125; $sort 数组排序 1为升序排列，-1为降序排列12345678910&#123; "_id" : 1.0, "arr" : [ 3, 1, 5, 2, 6 ]&#125; 1234db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [], $sort: 1&#125;&#125;&#125;) 结果12345678910&#123; "_id" : 1.0, "arr" : [ 1, 2, 3, 5, 6 ]&#125; 2. 根据数组的某一项排序12345678910111213141516171819202122232425&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 5, "b" : 6 &#125;, &#123; "a" : 3, "b" : 6 &#125;, &#123; "a" : 2, "b" : 6 &#125;, &#123; "a" : 4, "b" : 6 &#125;, &#123; "a" : 5, "b" : 6 &#125; ]&#125; 12345// 根据数组arr的a属性升序排列db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [], $sort: &#123;"a": 1&#125;&#125;&#125;&#125;) 结果12345678910111213141516171819202122232425&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 2, "b" : 6 &#125;, &#123; "a" : 3, "b" : 6 &#125;, &#123; "a" : 4, "b" : 6 &#125;, &#123; "a" : 5, "b" : 6 &#125;, &#123; "a" : 5, "b" : 6 &#125; ]&#125; $slice 数组截取 正数则从前向后，负数从后向前12345678910&#123; "_id" : 1.0, "arr" : [ 1, 2, 3, 4, 5 ]&#125; 12345// 截取数组arr后三位db.getCollection('user').update( &#123;"_id": 1.0&#125;, &#123;$push: &#123;"arr": &#123;$each: [], $slice: -3&#125;&#125;&#125;) 结果12345678&#123; "_id" : 1.0, "arr" : [ 3, 4, 5 ]&#125; 占位符$，更新数组的某一项不确定位置的值 例11234&#123; "_id" : 1.0, "arr" : [ 3, 4, 5, 20 ]&#125; 12345// 把数组arr值为20的变成10db.getCollection('user').update( &#123;"_id": 1.0, "arr": 20&#125;, &#123;$set: &#123;"arr.$": NumberInt(10)&#125;&#125;) 结果1234&#123; "_id" : 1.0, "arr" : [ 3, 4, 5, 10 ]&#125; 例21234567891011121314151617&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 1, "b" : 10 &#125;, &#123; "a" : 2, "b" : 20 &#125;, &#123; "a" : 3, "b" : 30 &#125; ]&#125; 12345// 更新数组arr里面属性a为2的，把当前位置的b变成200db.getCollection('user').update( &#123;"_id": 1.0, "arr.a": 2&#125;, &#123;$set: &#123;"arr.$.b": NumberInt(200)&#125;&#125;) 结果1234567891011121314151617&#123; "_id" : 1.0, "arr" : [ &#123; "a" : 1, "b" : 10 &#125;, &#123; "a" : 2, "b" : 200 &#125;, &#123; "a" : 3, "b" : 30 &#125; ]&#125;]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb安装]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1. 进入mongodb\bin目录 =&gt;cmd 2. 在mongodb目录创建 \data\db 3. cmd执行mongod.exe --dbpath=D:\mongodb\data\db 4. 在mongodb目录创建 \data\log 5. cmd执行 mongod.exe --logpath=D:\mongodb\data\log\mongodb.log 6. 在mongodb目录创建配置文件（mongodb.config） 7. 配置文件内容 12dbpath=D:\mongodb\data\dblogpath=D:\mongodb\data\log\mongodb.log 8. 执行 mongod.exe --config D:\mongodb\mongodb.config 9. 添加到服务 （servies.msc） 1mongod.exe --dbpath=D:\mongodb\data\db --logpath=D:\mongodb\data\log\log.txt --install --serviceName "MongoDB" 10. 开启关闭服务 123net start mongodbnet stop mongodbsc delete "MongoDB" # 删除服务]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb数据导入导出]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%2F</url>
    <content type="text"><![CDATA[进入mongodb的bin目录 1. 数据导出 -d: 数据库名称 -c: 表名 -o: 存储路径 –type: 导出类型 -f: 导出的数据mongoexport -d test -c blog -o G:\users.json --type json -f &quot;_id,data,user&quot; 2. 数据导入 -d: 数据库名称 -c: 表名 –file: 路径 –type: 导出类型mongoimport -d test -c us --file G:\users.json --type json]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb加密]]></title>
    <url>%2F2019%2F01%2F29%2Fmongodb%2Fmongodb%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[1. 切换到admin数据库 use admin 2. 管理员设置密码 db.createUser({user: &quot;root&quot;,pwd: &quot;123&quot;,roles: [&quot;root&quot;]}) 3. 验证是否成功 db.auth(&quot;root&quot;,&quot;123&quot;) 4. 给其它数据库添加用户 12use testdb.createUser(&#123;user: "hsianglee",pwd: "123",roles: [&#123;role: "readWrite",db: "test"&#125;]&#125;) 5. mongodb.config内容修改 12dbpath=F:\mongodb\data\db --authlogpath=F:\mongodb\data\log\mongodb.log 6. 重启服务 mongodb.exe --dbpath F:\mongodb\data\db --auth 7. node连接 mongodb://root:123@127.0.0.1:27017/test 8. 其它命令 1234db.system.users.find() # 查询已添加用户（切换到admin）db.auth("root","123") # 登录认证db.dropUser("lee") # 删除用户（先切换到当前数据库）db.updateUser("test",&#123;user: "",pwd: "", roles: [&#123;role: "read",db: "test"&#125;]&#125;) # 修改权限]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
</search>
